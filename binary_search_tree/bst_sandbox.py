from binary_search_tree import BinarySearchTree as BST
from dll_queue import Queue
from dll_stack import Stack


BST1 = BST(8)
BST1.insert(20)
BST1.insert(4)
BST1.insert(25)
BST1.insert(3)
BST1.insert(26)
BST1.insert(6)
print(f"value: {BST1.value}\nright: {BST1.right.right.right.value}")
print("==========================================")
print(f"{BST1.value}")
print(f"{BST1.left.value, BST1.right.value}")
print(f"{BST1.left.left.value, BST1.left.right.value, BST1.right.right.value}")
print(f"{BST1.right.right.right.value}")
print("==========================================")
BST1.in_order_print(BST1)
print("==========================================")
STACK1 = Stack()
print(f"STACK SIZE: {STACK1.size}")
STACK1.push(BST1)
print(f"STACK SIZE: {STACK1.size}")
print(f"DLL HEAD.VALUE: {STACK1.storage.head.value}")
STACK1.push(3)
print(f"DLL HEAD.VALUE: {STACK1.storage.head.value}")
print(f"STACK.POP: {STACK1.pop()}")
print(f"DLL HEAD.VALUE: {STACK1.storage.head.value}")
print("==================DFT========================")
BST1.dft_print(BST1)
print("==================BFT========================")
BST1.bft_print(BST1)
print("==================POST_O_DFT========================")
BST1.post_order_dft(BST1)
print("==================PRE_O_DFT========================")
BST1.pre_order_dft(BST1)
